<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Fx.Data.SQL</name>
    </assembly>
    <members>
        <member name="T:Fx.Data.SQL.Handler.SQLEntityService">
            <summary>
            SQL Server Entity Service to handle CRUD Operations
            </summary>
        </member>
        <member name="M:Fx.Data.SQL.Handler.SQLEntityService.Create(System.String,System.Collections.Generic.Dictionary{System.String,System.String})">
             <summary>
             Generic Insertion for SQL Server
             </summary>
             <param name="entity">Table Name eg.'test', 'user'</param>
             <param name="jsonData">
             eg.{
              "C1": "Field 1",
              "C2": "Field 2",
              "Age": "31"
            }
            </param>
             <returns>Record 'id' of the inserted Object.</returns>
        </member>
        <member name="M:Fx.Data.SQL.Handler.SQLEntityService.Update(System.String,System.Collections.Generic.Dictionary{System.String,System.String})">
            <inheritdoc cref="!:IEntityService.Update(string, string, Parameters)" />
        </member>
        <member name="M:Fx.Data.SQL.Handler.SQLEntityService.Update(System.String,System.Collections.Generic.IList{System.String},System.Collections.Generic.Dictionary{System.String,System.String})">
            <inheritdoc cref="!:IEntityService.Update(string, string, IList&lt;string&gt;, Parameters)" />
        </member>
        <member name="M:Fx.Data.SQL.Handler.SQLEntityService.Truncate(System.String)">
            <summary>
            <inheritdoc/>
            </summary>
            <param name="table"><inheritdoc/></param>
            <returns><inheritdoc/></returns>
        </member>
        <member name="M:Fx.Data.SQL.Handler.SQLEntityService.GetById(System.String,System.String)">
            <summary>
            <inheritdoc />
            </summary>
            <param name="entity"> <inheritdoc /></param>
            <param name="id"> <inheritdoc /></param>
            <returns> <inheritdoc /></returns>
        </member>
        <member name="M:Fx.Data.SQL.Handler.SQLEntityService.ExecuteQuery(System.String,Fx.Data.SQL.Helpers.Conditions)">
            <returns></returns>
        </member>
        <member name="M:Fx.Data.SQL.Handler.SQLEntityService.Sum(System.String,System.String,System.Collections.Generic.List{Fx.Data.SQL.Helpers.Filter})">
            <summary>
            <inheritdoc/>
            </summary>
            <param name="entity"><inheritdoc/> </param>
            <param name="fieldToSum"><inheritdoc/> </param>
            <param name="filter"><inheritdoc/></param>
            <returns><inheritdoc/></returns>
        </member>
        <member name="M:Fx.Data.SQL.Handler.SQLEntityService.Max(System.String,System.String,System.Collections.Generic.List{Fx.Data.SQL.Helpers.Filter})">
            <summary>
            <inheritdoc/>
            </summary>
            <param name="entity"><inheritdoc/> </param>
            <param name="fieldToSum"><inheritdoc/> </param>
            <param name="filter"><inheritdoc/></param>
            <returns><inheritdoc/></returns>
        </member>
        <member name="M:Fx.Data.SQL.Handler.SQLEntityService.Min(System.String,System.String,System.Collections.Generic.List{Fx.Data.SQL.Helpers.Filter})">
            <summary>
            <inheritdoc/>
            </summary>
            <param name="entity"><inheritdoc/> </param>
            <param name="fieldToSum"><inheritdoc/> </param>
            <param name="filter"> <inheritdoc/> </param>
            <returns> <inheritdoc/> </returns>
        </member>
        <member name="P:Fx.Data.SQL.Helpers.Conditions.Condition">
            <summary>
            gt, gte, lt, lte, eq, neq, lk, nlk, bt, nbt, in, nin => all from 'RepoDb.Enumerations'
            </summary>
        </member>
        <member name="T:Fx.Data.SQL.Helpers.QueryFilter">
            <summary>
            Which is an alternative of QueryField
            </summary>
        </member>
        <member name="P:Fx.Data.SQL.Helpers.QueryFilter.DataType">
            <summary>
            Optional lets have this, if required we can use it for some datatype.
            </summary>
        </member>
        <member name="M:Fx.Data.SQL.Helpers.Conversions.GetType(System.String)">
            <summary>
            Converts to various Types.
            Currently Supported types: int,float,long, boolean, datetime.
            Ref: 
            https://learn.microsoft.com/en-us/dotnet/csharp/language-reference/builtin-types/built-in-types
            https://learn.microsoft.com/en-us/dotnet/framework/data/adonet/sql-server-data-type-mappings
            </summary>
            <param name="value">actual value to be converted</param>
            <returns>converted value return with right data type.</returns>  
        </member>
        <member name="P:Fx.Data.SQL.Helpers.ResponseModel.Success">
            <summary>
            Indicates that the execution is success or failure
            </summary>
        </member>
        <member name="P:Fx.Data.SQL.Helpers.ResponseModel.Message">
            <summary>
            Message about the execution, if success, simply it says "Ok", if error, it will display high level error message. 
            </summary>
        </member>
        <member name="P:Fx.Data.SQL.Helpers.ResponseModel.Data">
            <summary>
            The actual returned data. If no content or no data it would be empty.
            </summary>
        </member>
        <member name="T:Fx.Data.SQL.Interface.IEntityService">
             <summary>
             Entity Service Interface to implement in RDBMS
            </summary>
        </member>
        <member name="M:Fx.Data.SQL.Interface.IEntityService.GetById(System.String,System.String)">
            <summary>
            Get the data by unique 'Id'. The field should be in the name of 'id' or 'Id'.
            </summary>
            <param name="table">Table name, which exists in the database.</param>
            <param name="id">unique id's value</param>
            <returns>returns the table data</returns>
        </member>
        <member name="M:Fx.Data.SQL.Interface.IEntityService.GetSingle(System.String,Fx.Data.SQL.Helpers.Conditions)">
            <summary>
            Get the record by using filter condition
            </summary>
            <param name="table">On what table, do this query to be executed.</param>
            <param name="conditions">Filter condition to get the data from table</param>
            <returns>returns the table data</returns>
        </member>
        <member name="M:Fx.Data.SQL.Interface.IEntityService.GetByPage(System.String,Fx.Data.SQL.Helpers.Conditions)">
            <summary>
            Get the record by using filter condition
            </summary>
            <param name="table">On what table, do this query to be executed.</param>
            <param name="conditions">Filter condition to get the data from table</param>
            <returns>returns the table data</returns>
        </member>
        <member name="M:Fx.Data.SQL.Interface.IEntityService.GetByPage(System.String,Fx.Data.SQL.Helpers.FilterParams)">
            <summary>
            Get the record by using filter condition
            </summary>
            <param name="table">On what table, do this query to be executed.</param>
            <param name="filters">Filter condition to get the data from table</param>
            <returns>returns the table data</returns>
        </member>
        <member name="M:Fx.Data.SQL.Interface.IEntityService.Create(System.String,System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Used to Insert data into the database
            </summary>
            <param name="table">On what table, do this query to be executed.</param>
            <param name="jsonData">Data as a JsonData</param>
            <returns>returns the inserted data.</returns>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Fx.Data.SQL.Interface.IEntityService.Update(System.String,System.Collections.Generic.Dictionary{System.String,System.String})" -->
        <!-- Badly formed XML comment ignored for member "M:Fx.Data.SQL.Interface.IEntityService.Update(System.String,System.Collections.Generic.IList{System.String},System.Collections.Generic.Dictionary{System.String,System.String})" -->
        <member name="M:Fx.Data.SQL.Interface.IEntityService.Delete(System.String,System.Int64)">
            <summary>
            Delete the data based on the unique condition
            </summary>
            <param name="table">On what table, do this query to be executed.</param>
            <param name="deleteId">unique Id, on which the records to be deleted.</param>
            <returns>Delete the record id.</returns>
        </member>
        <member name="M:Fx.Data.SQL.Interface.IEntityService.ExecuteNonQuery(System.String)">
            <summary>
            Used to execute a raw-SQL directly towards the database. It returns the number of rows affected during the execution. This method supports all types of RDMBS data providers.
            </summary>
            <param name="sqlQuery">The raw query statement</param>
            <returns>returns the table data</returns>
        </member>
        <member name="M:Fx.Data.SQL.Interface.IEntityService.Truncate(System.String)">
            <summary>
            Used to truncates a table from the database.
            </summary>
            <param name="table">On which table this to be executed.</param>
            <returns>return no of rows deleted.</returns>
        </member>
        <member name="M:Fx.Data.SQL.Interface.IEntityService.Average(System.String,System.String,System.Collections.Generic.List{Fx.Data.SQL.Helpers.Filter})">
            <summary>
            Used to compute the average value of the target field.
            </summary>
            <param name="table">On what table, do this query to be executed.</param>
            <param name="fields">On what field, this should be executed.</param>
            <param name="filter">Conditional Filter as List.</param>
            <returns>returns Max value</returns>
        </member>
        <member name="M:Fx.Data.SQL.Interface.IEntityService.Count(System.String,System.Collections.Generic.List{Fx.Data.SQL.Helpers.Filter})">
            <summary>
            Used to count the number of rows from the table.
            </summary>
            <param name="table">On what table, do this query to be executed.</param>
            <param name="filter">Conditional Filter as List.</param>
            <returns>returns No of Records</returns>
        </member>
        <member name="M:Fx.Data.SQL.Interface.IEntityService.BatchQuery(System.String,Fx.Data.SQL.Helpers.FilterParams)">
            <summary>
            Used to query the rows from the database by batch.
            </summary>
            <param name="table">On what table, do this query to be executed.</param>
            <param name="filter">Conditional Filter as List.</param>
            <returns>returns a completed filtered data</returns>
        </member>
        <member name="M:Fx.Data.SQL.Interface.IEntityService.ExecuteQuery(System.String,Fx.Data.SQL.Helpers.Conditions)">
            <summary>
            Used to execute a raw-SQL directly towards the database.This method supports all types of RDMBS data providers.
            </summary>
            <param name="table">On what table, do this query to be executed.</param>
            <param name="conditions">Conditional Filters </param>
            <returns>returns a completed filtered data</returns>
        </member>
        <member name="M:Fx.Data.SQL.Interface.IEntityService.Exists(System.String,System.Collections.Generic.List{Fx.Data.SQL.Helpers.Filter})">
            <summary>
            Finds the Exists value based on the conditions or filters.
            </summary>
            <param name="table">On what table, do this query to be executed.</param>
            <param name="filters">Conditional Filter as List.</param>
            <returns>returns Bool value</returns>
        </member>
        <member name="M:Fx.Data.SQL.Interface.IEntityService.Sum(System.String,System.String,System.Collections.Generic.List{Fx.Data.SQL.Helpers.Filter})">
            <summary>
            Finds the Sum of value based on the conditions or filters.
            </summary>
            <param name="table">On what table, do this query to be executed.</param>
            <param name="fields">On what field, this should be executed.</param>
            <param name="filter">Conditional Filter as List.</param>
            <returns>returns Sum value</returns>
        </member>
        <member name="M:Fx.Data.SQL.Interface.IEntityService.Min(System.String,System.String,System.Collections.Generic.List{Fx.Data.SQL.Helpers.Filter})">
            <summary>
            Finds the Min value based on the conditions or filters.
            </summary>
            <param name="table">On what table, do this query to be executed.</param>
            <param name="fields">On what field, this should be executed.</param>
            <param name="filter">Conditional Filter as List.</param>
            <returns>returns Min value</returns>
        </member>
        <member name="M:Fx.Data.SQL.Interface.IEntityService.Max(System.String,System.String,System.Collections.Generic.List{Fx.Data.SQL.Helpers.Filter})">
            <summary>
            Finds the Maximum value based on the conditions or filters.
            </summary>
            <param name="table">On what table, do this query to be executed.</param>
            <param name="fields">On what field, this should be executed.</param>
            <param name="filter">Conditional Filter as List.</param>
            <returns>returns Max value</returns>
        </member>
    </members>
</doc>
