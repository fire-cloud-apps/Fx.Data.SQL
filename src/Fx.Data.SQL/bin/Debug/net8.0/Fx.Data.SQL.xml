<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Fx.Data.SQL</name>
    </assembly>
    <members>
        <member name="T:Fx.Data.SQL.ConditionConstant">
            <summary>
            Conditional Constants
            </summary>
        </member>
        <member name="F:Fx.Data.SQL.ConditionConstant.GreaterThen">
            <summary>
            Used for the condition Greater Then
            </summary>
        </member>
        <member name="F:Fx.Data.SQL.ConditionConstant.GreaterThenEqual">
            <summary>
            Used for the condition Greater Then Equal
            </summary>
        </member>
        <member name="F:Fx.Data.SQL.ConditionConstant.LesserThen">
            <summary>
            Used for the condition Lesser Then
            </summary>
        </member>
        <member name="F:Fx.Data.SQL.ConditionConstant.LesserThenEqual">
            <summary>
            Used for the condition Lesser Then Equal
            </summary>
        </member>
        <member name="T:Fx.Data.SQL.Handler.SQLEntityService">
            <summary>
            SQL Server Entity Service to handle CRUD Operations
            </summary>
        </member>
        <member name="M:Fx.Data.SQL.Handler.SQLEntityService.#ctor(System.Data.IDbConnection,Microsoft.Extensions.Logging.ILogger)">
            <summary>
            SQL Entity Service which initializes the SQLServer, MySQL, SQLite, PostgreSQL
            </summary>
            <param name="dbConnection">DB Connectivity</param>
            <param name="logger">Logger</param>
        </member>
        <member name="M:Fx.Data.SQL.Handler.SQLEntityService.ExecuteNonQuery(System.String)">
            <summary>
            Executes any query
            </summary>
            <param name="sqlQuery">execute any query</param>
            <returns>returns the resulted from the query</returns>
        </member>
        <member name="M:Fx.Data.SQL.Handler.SQLEntityService.Create(System.String,System.Collections.Generic.Dictionary{System.String,System.String})">
             <summary>
             Generic Insertion for SQL Server
             </summary>
             <param name="entity">Table Name eg.'test', 'user'</param>
             <param name="jsonData">
             eg.{
              "C1": "Field 1",
              "C2": "Field 2",
              "Age": "31"
            }
            </param>
             <returns>Record 'id' of the inserted Object.</returns>
        </member>
        <member name="M:Fx.Data.SQL.Handler.SQLEntityService.Update(System.String,System.Collections.Generic.Dictionary{System.String,System.String})">
            <inheritdoc cref="!:IEntityService.Update(string, string, Parameters)" />
        </member>
        <member name="M:Fx.Data.SQL.Handler.SQLEntityService.Update(System.String,System.Collections.Generic.IList{System.String},System.Collections.Generic.Dictionary{System.String,System.String})">
            <inheritdoc cref="!:IEntityService.Update(string, string, IList&lt;string&gt;, Parameters)" />
        </member>
        <member name="M:Fx.Data.SQL.Handler.SQLEntityService.Truncate(System.String)">
            <summary>
            <inheritdoc/>
            </summary>
            <param name="table"><inheritdoc/></param>
            <returns><inheritdoc/></returns>
        </member>
        <member name="M:Fx.Data.SQL.Handler.SQLEntityService.GetById(System.String,System.String)">
            <summary>
            <inheritdoc />
            </summary>
            <param name="entity"> <inheritdoc /></param>
            <param name="id"> <inheritdoc /></param>
            <returns> <inheritdoc /></returns>
        </member>
        <member name="M:Fx.Data.SQL.Handler.SQLEntityService.ExecuteQuery(System.String,Fx.Data.SQL.Helpers.Conditions)">
            <returns></returns>
        </member>
        <member name="M:Fx.Data.SQL.Handler.SQLEntityService.Count(System.String,System.Collections.Generic.List{Fx.Data.SQL.Helpers.Filter})">
            <summary>
            <inheritdoc/>
            </summary>
            <param name="table"><inheritdoc/> </param>
            <param name="filter"> <inheritdoc/> </param>
            <returns> <inheritdoc/> </returns>
        </member>
        <member name="M:Fx.Data.SQL.Handler.SQLEntityService.Sum(System.String,System.String,System.Collections.Generic.List{Fx.Data.SQL.Helpers.Filter})">
            <summary>
            <inheritdoc/>
            </summary>
            <param name="entity"><inheritdoc/> </param>
            <param name="fieldToSum"><inheritdoc/> </param>
            <param name="filter"><inheritdoc/></param>
            <returns><inheritdoc/></returns>
        </member>
        <member name="M:Fx.Data.SQL.Handler.SQLEntityService.Max(System.String,System.String,System.Collections.Generic.List{Fx.Data.SQL.Helpers.Filter})">
            <summary>
            <inheritdoc/>
            </summary>
            <param name="entity"><inheritdoc/> </param>
            <param name="fieldToSum"><inheritdoc/> </param>
            <param name="filter"><inheritdoc/></param>
            <returns><inheritdoc/></returns>
        </member>
        <member name="M:Fx.Data.SQL.Handler.SQLEntityService.Min(System.String,System.String,System.Collections.Generic.List{Fx.Data.SQL.Helpers.Filter})">
            <summary>
            <inheritdoc/>
            </summary>
            <param name="entity"><inheritdoc/> </param>
            <param name="fieldToSum"><inheritdoc/> </param>
            <param name="filter"> <inheritdoc/> </param>
            <returns> <inheritdoc/> </returns>
        </member>
        <member name="T:Fx.Data.SQL.Helpers.Conditions">
            <summary>
            Conditions query.
            </summary>
        </member>
        <member name="P:Fx.Data.SQL.Helpers.Conditions.Page">
            <summary>
            Set the on the condition, form which page we need to read. Page stats from 0, Default value is '0'.
            </summary>
        </member>
        <member name="P:Fx.Data.SQL.Helpers.Conditions.RowsPerBatch">
            <summary>
            No of records to be retrieved from the database.
            </summary>
        </member>
        <member name="T:Fx.Data.SQL.Helpers.Conversions">
            <summary>
            Very much to convert all kind of data type from C# to RDBMS
            </summary>
        </member>
        <member name="M:Fx.Data.SQL.Helpers.Conversions.ParameterConversion(System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Used to convert the parameter value to the right data type.
            </summary>
            <param name="parameter">Dictionary object</param>
            <returns>returns the target data type.</returns>
        </member>
        <member name="M:Fx.Data.SQL.Helpers.Conversions.DictionaryToJson(System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Converts the dictionary Object as 'JSON' Data.
            </summary>
            <param name="dict">Dictionary Object</param>
            <returns>returns a JSON String</returns>
        </member>
        <member name="M:Fx.Data.SQL.Helpers.Conversions.GetOperation(System.String)">
            <summary>
            Get the Operation condition to be used which is equivalent to RepoDb 'Operation'.
            </summary>
            <param name="condition">the condition string as 'gt, gte, lt, lte, eq, neq, lk, nlk, bt, nbt, in, nin => all from 'RepoDb.Enumerations''.</param>
            <returns></returns>
        </member>
        <member name="M:Fx.Data.SQL.Helpers.Conversions.GetType(System.String)">
            TODO: Need to extend this method for all Data Types.
            <summary>
            Converts to various Types.
            Currently Supported types: int,float,long, boolean, datetime.
            Ref: 
            https://learn.microsoft.com/en-us/dotnet/csharp/language-reference/builtin-types/built-in-types
            https://learn.microsoft.com/en-us/dotnet/framework/data/adonet/sql-server-data-type-mappings
            </summary>
            <param name="value">actual value to be converted</param>
            <returns>converted value return with right data type.</returns>  
        </member>
        <member name="T:Fx.Data.SQL.Helpers.CustomDataType">
            <summary>
            For more complex datatypes, we should use this method to identify a target data type form the sender.
            </summary>
            <remarks>
            https://learn.microsoft.com/en-us/dotnet/framework/data/adonet/sql-server-data-type-mappings
            </remarks>
        </member>
        <member name="P:Fx.Data.SQL.Helpers.CustomDataType.Type">
            <summary>
            Target Data Type as string. Eg. 'byte[]', Guid, Char[], XML or even string etc.
            </summary>
        </member>
        <member name="P:Fx.Data.SQL.Helpers.CustomDataType.Value">
            <summary>
            Data valye as string.
            </summary>
        </member>
        <member name="T:Fx.Data.SQL.Helpers.TraceFactory">
            <summary>
            Trance Factory used to capture the executed query.
            </summary>
        </member>
        <member name="M:Fx.Data.SQL.Helpers.TraceFactory.CreateTracer">
            <summary>
            Enables the Traces using the below method.
            </summary>
            <returns>returns trace information</returns>
        </member>
        <member name="T:Fx.Data.SQL.Helpers.FilterParams">
            <summary>
            Filter Params
            </summary>
        </member>
        <member name="P:Fx.Data.SQL.Helpers.FilterParams.Fields">
            <summary>
            Fields to return or columns where operations to be conducted.
            </summary>
        </member>
        <member name="T:Fx.Data.SQL.Helpers.And">
            <summary>
            "AND" Condition
            </summary>
        </member>
        <member name="T:Fx.Data.SQL.Helpers.Or">
            <summary>
            "OR" condition
            </summary>
        </member>
        <member name="T:Fx.Data.SQL.Helpers.Filter">
            <summary>
            Filter object with 'And' / 'Or'.
            </summary>
        </member>
        <member name="T:Fx.Data.SQL.Helpers.Sort">
            <summary>
            Sort conditions
            </summary>
        </member>
        <member name="P:Fx.Data.SQL.Helpers.Sort.Field">
            <summary>
            Sorting Field
            </summary>
        </member>
        <member name="P:Fx.Data.SQL.Helpers.Sort.OrderBy">
            <summary>
            Order By 'Descending' or 'Ascending'
            </summary>
        </member>
        <member name="P:Fx.Data.SQL.Helpers.InputFields.Value1">
            <summary>
            Used for 'between' and 'In' Operators
            </summary>
        </member>
        <member name="P:Fx.Data.SQL.Helpers.InputFields.Value2">
            <summary>
            Used for 'between' and 'In' Operators
            </summary>
        </member>
        <member name="P:Fx.Data.SQL.Helpers.InputFields.Condition">
            <summary>
            gt, gte, lt, lte, eq, neq, lk, nlk, bt, nbt, in, nin => all from 'RepoDb.Enumerations'
            </summary>
        </member>
        <member name="P:Fx.Data.SQL.Helpers.ResponseModel.Success">
            <summary>
            Indicates that the execution is success or failure
            </summary>
        </member>
        <member name="P:Fx.Data.SQL.Helpers.ResponseModel.Message">
            <summary>
            Message about the execution, if success, simply it says "Ok", if error, it will display high level error message. 
            </summary>
        </member>
        <member name="P:Fx.Data.SQL.Helpers.ResponseModel.Data">
            <summary>
            The actual returned data. If no content or no data it would be empty.
            </summary>
        </member>
        <member name="T:Fx.Data.SQL.Interface.IEntityService">
             <summary>
             Entity Service Interface to implement in RDBMS
            </summary>
        </member>
        <member name="M:Fx.Data.SQL.Interface.IEntityService.GetById(System.String,System.String)">
            <summary>
            Get the data by unique 'Id'. The field should be in the name of 'id' or 'Id'.
            </summary>
            <param name="table">Table name, which exists in the database.</param>
            <param name="id">unique id's value</param>
            <returns>returns the table data</returns>
        </member>
        <member name="M:Fx.Data.SQL.Interface.IEntityService.GetSingle(System.String,Fx.Data.SQL.Helpers.Conditions)">
            <summary>
            Get the record by using filter condition
            </summary>
            <param name="table">On what table, do this query to be executed.</param>
            <param name="conditions">Filter condition to get the data from table</param>
            <returns>returns the table data</returns>
        </member>
        <member name="M:Fx.Data.SQL.Interface.IEntityService.GetByPage(System.String,Fx.Data.SQL.Helpers.Conditions)">
            <summary>
            Get the record by using filter condition
            </summary>
            <param name="table">On what table, do this query to be executed.</param>
            <param name="conditions">Filter condition to get the data from table</param>
            <returns>returns the table data</returns>
        </member>
        <member name="M:Fx.Data.SQL.Interface.IEntityService.GetByPage(System.String,Fx.Data.SQL.Helpers.FilterParams)">
            <summary>
            Get the record by using filter condition
            </summary>
            <param name="table">On what table, do this query to be executed.</param>
            <param name="filters">Filter condition to get the data from table</param>
            <returns>returns the table data</returns>
        </member>
        <member name="M:Fx.Data.SQL.Interface.IEntityService.Create(System.String,System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Used to Insert data into the database
            </summary>
            <param name="table">On what table, do this query to be executed.</param>
            <param name="jsonData">Data as a JsonData</param>
            <returns>returns the inserted data.</returns>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Fx.Data.SQL.Interface.IEntityService.Update(System.String,System.Collections.Generic.Dictionary{System.String,System.String})" -->
        <!-- Badly formed XML comment ignored for member "M:Fx.Data.SQL.Interface.IEntityService.Update(System.String,System.Collections.Generic.IList{System.String},System.Collections.Generic.Dictionary{System.String,System.String})" -->
        <member name="M:Fx.Data.SQL.Interface.IEntityService.Delete(System.String,System.Int64)">
            <summary>
            Delete the data based on the unique condition
            </summary>
            <param name="table">On what table, do this query to be executed.</param>
            <param name="deleteId">unique Id, on which the records to be deleted.</param>
            <returns>Delete the record id.</returns>
        </member>
        <member name="M:Fx.Data.SQL.Interface.IEntityService.ExecuteNonQuery(System.String)">
            <summary>
            Used to execute a raw-SQL directly towards the database. It returns the number of rows affected during the execution. This method supports all types of RDMBS data providers.
            </summary>
            <param name="sqlQuery">The raw query statement</param>
            <returns>returns the table data</returns>
        </member>
        <member name="M:Fx.Data.SQL.Interface.IEntityService.Truncate(System.String)">
            <summary>
            Used to truncates a table from the database.
            </summary>
            <param name="table">On which table this to be executed.</param>
            <returns>return no of rows deleted.</returns>
        </member>
        <member name="M:Fx.Data.SQL.Interface.IEntityService.Average(System.String,System.String,System.Collections.Generic.List{Fx.Data.SQL.Helpers.Filter})">
            <summary>
            Used to compute the average value of the target field.
            </summary>
            <param name="table">On what table, do this query to be executed.</param>
            <param name="fields">On what field, this should be executed.</param>
            <param name="filter">Conditional Filter as List.</param>
            <returns>returns Max value</returns>
        </member>
        <member name="M:Fx.Data.SQL.Interface.IEntityService.Count(System.String,System.Collections.Generic.List{Fx.Data.SQL.Helpers.Filter})">
            <summary>
            Used to count the number of rows from the table.
            </summary>
            <param name="table">On what table, do this query to be executed.</param>
            <param name="filter">Conditional Filter as List.</param>
            <returns>returns No of Records</returns>
        </member>
        <member name="M:Fx.Data.SQL.Interface.IEntityService.BatchQuery(System.String,Fx.Data.SQL.Helpers.FilterParams)">
            <summary>
            Used to query the rows from the database by batch.
            </summary>
            <param name="table">On what table, do this query to be executed.</param>
            <param name="filter">Conditional Filter as List.</param>
            <returns>returns a completed filtered data</returns>
        </member>
        <member name="M:Fx.Data.SQL.Interface.IEntityService.ExecuteQuery(System.String,Fx.Data.SQL.Helpers.Conditions)">
            <summary>
            Used to execute a raw-SQL directly towards the database.This method supports all types of RDMBS data providers.
            </summary>
            <param name="table">On what table, do this query to be executed.</param>
            <param name="conditions">Conditional Filters </param>
            <returns>returns a completed filtered data</returns>
        </member>
        <member name="M:Fx.Data.SQL.Interface.IEntityService.Exists(System.String,System.Collections.Generic.List{Fx.Data.SQL.Helpers.Filter})">
            <summary>
            Finds the Exists value based on the conditions or filters.
            </summary>
            <param name="table">On what table, do this query to be executed.</param>
            <param name="filters">Conditional Filter as List.</param>
            <returns>returns Bool value</returns>
        </member>
        <member name="M:Fx.Data.SQL.Interface.IEntityService.Sum(System.String,System.String,System.Collections.Generic.List{Fx.Data.SQL.Helpers.Filter})">
            <summary>
            Finds the Sum of value based on the conditions or filters.
            </summary>
            <param name="table">On what table, do this query to be executed.</param>
            <param name="fields">On what field, this should be executed.</param>
            <param name="filter">Conditional Filter as List.</param>
            <returns>returns Sum value</returns>
        </member>
        <member name="M:Fx.Data.SQL.Interface.IEntityService.Min(System.String,System.String,System.Collections.Generic.List{Fx.Data.SQL.Helpers.Filter})">
            <summary>
            Finds the Min value based on the conditions or filters.
            </summary>
            <param name="table">On what table, do this query to be executed.</param>
            <param name="fields">On what field, this should be executed.</param>
            <param name="filter">Conditional Filter as List.</param>
            <returns>returns Min value</returns>
        </member>
        <member name="M:Fx.Data.SQL.Interface.IEntityService.Max(System.String,System.String,System.Collections.Generic.List{Fx.Data.SQL.Helpers.Filter})">
            <summary>
            Finds the Maximum value based on the conditions or filters.
            </summary>
            <param name="table">On what table, do this query to be executed.</param>
            <param name="fields">On what field, this should be executed.</param>
            <param name="filter">Conditional Filter as List.</param>
            <returns>returns Max value</returns>
        </member>
    </members>
</doc>
